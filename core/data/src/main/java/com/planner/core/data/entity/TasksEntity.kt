package com.planner.core.data.entity

import android.graphics.Paint
import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey

/**
 * Entity class representing a task in the database.
 *
 * @param taskId The ID of the task (auto-generated by Room).
 * @param description The description of the task.
 * @param isDone The status of the task (whether it is done or not).
 * @param contributor The name of the contributor of the task.
 * @param taskManagerId The ID of the task manager that the task belongs to.
 */
@Entity(tableName = "task")
data class TaskEntity(
    @PrimaryKey(autoGenerate = true)
    @ColumnInfo(name = "task_id")
    val taskId: Int = 0,
    val description: String,
    @ColumnInfo(name = "is_done")
    val isDone: Boolean = false,
    val contributor: String? = null,
    @ColumnInfo(name = "task_manager_id")
    val taskManagerId: Long,
) {
    /**
     * Converts a [TaskEntity] object to a [Task] object.
     *
     * @return A [Task] object.
     */
    fun toTask() =
        Task(
            description = this.description,
            contributor = this.contributor,
            isDone = this.isDone,
            id = taskId.toLong(),
        )
}

/**
 * Data class representing a task.
 *
 * @param id The ID of the task.
 * @param description The description of the task.
 * @param contributor The name of the contributor of the task.
 * @param isDone The status of the task (whether it is done or not).
 */
data class Task(
    val id: Long? = null,
    val description: String,
    val contributor: String? = null,
    val isDone: Boolean = false,
) {
    /**
     * Converts a [Task] object to a [TaskEntity] object.
     *
     * @param taskManagerId The ID of the task manager that the task belongs to.
     * @return A [TaskEntity] object.
     */
    fun toTaskEntity(taskManagerId: Long) = TaskEntity(
        description = this.description,
        isDone = this.isDone,
        contributor = this.contributor,
        taskManagerId = taskManagerId,
    )
}

/**
 * Extension function that returns the flag for striking through the text if the boolean value is true,
 * and returns 0 otherwise.
 *
 * @return The flag for striking through the text or 0.
 */
fun Boolean.strikeThrough() = if (this@strikeThrough) {
    Paint.STRIKE_THRU_TEXT_FLAG
} else {
    0
}
